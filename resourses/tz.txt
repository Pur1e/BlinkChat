Техническое Задание (ТЗ) для Реалтайм Чат-Приложения
1. Цель проекта
Создать чат-приложение с поддержкой обмена сообщениями в реальном времени, которое будет использовать WebSocket для передачи данных,
 Redis для хранения сессий и групп, Kafka или RabbitMQ для доставки сообщений, и Docker для контейнеризации.

2. Требования к функциональности
• Регистрация и аутентификация пользователей:
  - Пользователи должны иметь возможность регистрироваться в системе, используя email и пароль.
  - Для аутентификации использовать JWT (JSON Web Tokens).
• Реалтайм обмен сообщениями:
  - Сообщения между пользователями должны передаваться в реальном времени через WebSocket.
  - Поддержка личных сообщений (приватные чаты) и групповых чатов.
• Уведомления:
  - Пользователи должны получать уведомления о новых сообщениях даже при неактивном окне чата.
• Хранение сообщений:
  - Сообщения должны храниться в базе данных.
  - Использование Redis для кэширования сессий и данных о пользователях.
• История сообщений:
  - Пользователи должны иметь возможность просматривать историю сообщений.
• Масштабируемость:
  - Использование Kafka или RabbitMQ для доставки сообщений и обеспечения масштабируемости системы.
• Поддержка множества подключений:
  - Поддержка множества пользователей и их одновременных подключений к системе.

3. Требования к архитектуре
• Архитектура:
  - Микросервисная архитектура на базе Spring Boot.
• Используемые технологии:
  - Backend: Java 17, Spring Boot, WebSocket, Spring Security, Redis, Kafka/RabbitMQ.
  - Frontend: HTML, CSS, JavaScript/TypeScript, WebSocket API.
  - База данных: PostgreSQL/MySQL (для хранения данных пользователей и сообщений).
  - Инфраструктура: Docker, Docker Compose для контейнеризации компонентов.
  - Балансировка нагрузки: Nginx для распределения нагрузки и поддержки WebSocket соединений.
• Интеграции:
  - Аутентификация через JWT.
  - Redis для кэширования и хранения сессий.
  - Kafka или RabbitMQ для доставки сообщений.

4. Требования к производительности
• Приложение должно выдерживать одновременную работу до 1000 пользователей. • Задержка при отправке и получении сообщений не должна превышать 1 секунду.

5. Безопасность
• Использование Spring Security для аутентификации и авторизации. • Защита WebSocket соединений с использованием SSL/TLS. • Защита от CSRF, XSS и других распространенных атак.

6. Контейнеризация и развертывание
• Все компоненты приложения должны быть контейнеризованы с использованием Docker. • Использование Docker Compose для удобства развертывания на локальной машине. • Поддержка развертывания на сервере с помощью CI/CD.

7. Документация
• Полное описание API и WebSocket интерфейсов. • Документация по установке и настройке проекта. • Комментарии в коде, описывающие ключевые моменты реализации.

8. Сроки выполнения
Проект должен быть завершен в течение 1 месяца.

9. Тестирование
• Модульное тестирование: Использование JUnit для тестирования отдельных компонентов. • Интеграционное тестирование: Проверка взаимодействия между компонентами. • Нагрузочное тестирование: Проверка производительности системы под нагрузкой.

10. Риски и ограничения
• Возможные сложности с настройкой WebSocket и масштабируемостью системы. • Высокая нагрузка на Redis при большом количестве активных пользователей.

11. Финальные требования
• Приложение должно быть готово к развертыванию в продакшн среде. • Код должен быть чистым и поддерживаемым, с соблюдением лучших практик программирования.